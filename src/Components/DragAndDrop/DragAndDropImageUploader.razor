@using System.IO;
@using Microsoft.EntityFrameworkCore.Storage.ValueConversion
@using MikeCodesDotNET.Utilities
@using MikeCodesDotNET.Models
@using Tewr.Blazor.FileReader

@inject IImageService imageService
@inject IFileReaderService fileReaderService;

<style>
    .@dropTargetClass {
        display: block;
        padding: 20px;
        margin-bottom: 10px;
        min-height: 120px;
        background: #393B4D;
        border: 1px dashed rgba(115, 204, 154, 0.2);
        border-radius: 5px;
        position: relative;
    }

    .@dropTargetDragClass {
        border-color: #79C9A0;
        font-weight: bold;
    }
</style>

<div class="@DropClass dropImageLabel"
     @ref=dropTargetElement
     @ondrop=OnDrop
     @ondragenter=OnDragEnter
     @ondragleave=OnDragLeave>

    Drop Images Here.
    
    <ul>
    @foreach (var fileInfo in DropFileList)
    {
        <li>@fileInfo.Name</li>
    }
    </ul>
</div>


<br />

@if (!isUploading)
{
    <button @onclick="UploadClicked" class="btn btn-primary" disabled="@(!DropFileList.Any())">Upload</button>
    <button @onclick="ClearDrop" class="btn btn-primary" disabled="@(!DropFileList.Any())">Clear</button>
}
else
{
    <div class="spinner-border text-success" role="status">
      <span class="sr-only">Loading...</span>
    </div>
}


@code {
    ElementReference dropTargetElement;
    ElementReference dropTargetInput;
    IFileReaderRef dropReference;
    IFileReaderRef ipReference;
    bool Additive { get; set; }

    private bool isUploading;

    const string dropTargetDragClass = "droptarget-drag";
    const string dropTargetClass = "droptarget";

    private List<string> _dropClasses = new List<string>() { dropTargetClass };

    string DropClass => string.Join(" ", _dropClasses);

    protected string Output { get; set; }
    List<IFileInfo> DropFileList { get; } = new List<IFileInfo>();

    protected override async Task OnAfterRenderAsync(bool isFirstRender)
    {
        if (isFirstRender)
        {
            dropReference = fileReaderService.CreateReference(dropTargetElement);
            await dropReference.RegisterDropEventsAsync();
        }
    }

    public async Task OnAdditiveChange(ChangeEventArgs e)
    {
        Additive = (bool)e.Value;
        StateHasChanged();
        await dropReference.UnregisterDropEventsAsync();
        await dropReference.RegisterDropEventsAsync(Additive);
    }

    public async Task ClearDrop()
    {
        await dropReference.ClearValue();
        await this.RefreshDropFileList();
    }

    public void OnDragEnter(EventArgs e)
    {
        _dropClasses.Add(dropTargetDragClass);
    }

    public void OnDragLeave(EventArgs e)
    {
        _dropClasses.Remove(dropTargetDragClass);
    }

    public async Task OnDrop(EventArgs e)
    {
        Output += "Dropped a file.";
        _dropClasses.Remove(dropTargetDragClass);
        this.StateHasChanged();
        await this.RefreshDropFileList();
    }

    private async Task RefreshDropFileList()
    {
        DropFileList.Clear();
        foreach (var file in await dropReference.EnumerateFilesAsync())
        {
            var fileInfo = await file.ReadFileInfoAsync();
            DropFileList.Add(fileInfo);
        }
        this.StateHasChanged();
    }

    public async Task UploadClicked() {
        await ReadFile(dropReference);
    }


    public async Task ReadClick()
    {
        await ReadFile(ipReference);
    }

    [Parameter]
    public EventCallback<Image> OnImageUploaded { get; set; }


    public async Task ReadFile(IFileReaderRef list)
	{
        isUploading = true;
        foreach (var file in await list.EnumerateFilesAsync())
	    {
	        var image = await imageService.SaveImageAsync(file);
	        Output += $"{nameof(IFileInfo)}.{nameof(image.FileName)}: {image.Url}";
	        StateHasChanged();
            await OnImageUploaded.InvokeAsync(image);
	    }
        isUploading = false;
        DropFileList.Clear();
    }
}
